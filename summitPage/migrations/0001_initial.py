# Generated by Django 5.2.7 on 2025-10-16 06:14

import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import summitPage.models
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ApiAccessLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('api_key', models.CharField(blank=True, max_length=100, null=True)),
                ('endpoint', models.CharField(max_length=255)),
                ('method', models.CharField(max_length=10)),
                ('ip_address', models.GenericIPAddressField()),
                ('status_code', models.PositiveSmallIntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ExhibitionSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Registrant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, choices=[('', 'Select Title'), ('Prof', 'Prof.'), ('Dr', 'Dr.'), ('Eng', 'Eng.'), ('Mr', 'Mr.'), ('Mrs', 'Mrs.'), ('Ms', 'Ms')], max_length=10)),
                ('first_name', models.CharField(max_length=100)),
                ('second_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=50)),
                ('organization_type', models.CharField(choices=[('', 'Select Organization'), ('Government Agency', 'Government Agency'), ('Private Company', 'Private Company'), ('Academic Institution', 'Academic Institution'), ('Sector Association', 'Sector Association'), ('Industry Advocacy Groups', 'Industry Advocacy Groups'), ('Development Partners', 'Development Partners'), ('Student', 'Student'), ('other', 'Others')], max_length=100)),
                ('other_organization_type', models.CharField(blank=True, max_length=255, null=True)),
                ('job_title', models.CharField(blank=True, max_length=255)),
                ('interests', models.JSONField(blank=True, default=list)),
                ('other_interest', models.TextField(blank=True, null=True)),
                ('category', models.CharField(choices=summitPage.models.get_category_id, max_length=50, verbose_name='Registration Category')),
                ('privacy_agreed', models.BooleanField(default=False, verbose_name='Agreed to Privacy Policy')),
                ('accessibility_needs', models.TextField(blank=True, null=True)),
                ('updates_opt_in', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('unsubscribe_token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('national_id_number', models.CharField(blank=True, max_length=20, null=True, unique=True, verbose_name='National ID Number')),
                ('national_id_scan', models.FileField(blank=True, null=True, upload_to='uploads/id_scans/', verbose_name='Scanned National ID (JPG/PDF)')),
                ('passport_photo', models.FileField(blank=True, null=True, upload_to='uploads/passport_photos/', verbose_name='Passport Photo (JPG/PDF)')),
            ],
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(blank=True, choices=[('', 'Select Title'), ('Prof', 'Prof.'), ('Dr', 'Dr.'), ('Eng', 'Eng.'), ('Mr', 'Mr.'), ('Mrs', 'Mrs.'), ('Ms', 'Ms')], max_length=10)),
                ('first_name', models.CharField(max_length=100)),
                ('second_name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=50)),
                ('organization_type', models.CharField(choices=[('', 'Select Organization'), ('Government Agency', 'Government Agency'), ('Private Company', 'Private Company'), ('Academic Institution', 'Academic Institution'), ('Sector Association', 'Sector Association'), ('Industry Advocacy Groups', 'Industry Advocacy Groups'), ('Development Partners', 'Development Partners'), ('Student', 'Student'), ('other', 'Others')], max_length=100)),
                ('other_organization_type', models.CharField(blank=True, max_length=255, null=True)),
                ('job_title', models.CharField(blank=True, max_length=255)),
                ('interests', models.JSONField(blank=True, default=list)),
                ('other_interest', models.CharField(blank=True, max_length=255, null=True)),
                ('accessibility_needs', models.TextField(blank=True, null=True)),
                ('updates_opt_in', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('unsubscribe_token', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SummitGallery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=150)),
                ('image', models.ImageField(upload_to='gallery/')),
                ('description', models.TextField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('uploaded_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['order', '-uploaded_at'],
            },
        ),
        migrations.CreateModel(
            name='SummitPartner',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text='Official name of the partner or sponsor', max_length=150)),
                ('logo', models.ImageField(help_text="Upload the partner's logo image", upload_to='uploads/partners/logos/')),
                ('website', models.URLField(blank=True, help_text='Optional: Link to partner website', null=True)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of display on the sponsors section')),
                ('is_active', models.BooleanField(default=True, help_text='Show or hide this partner on the site')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Partner',
                'verbose_name_plural': 'Partners',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='SummitScheduleDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='e.g. Day 1 - November 10', max_length=100)),
                ('date', models.DateField(help_text='Date of the event day.')),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'verbose_name': 'Schedule Day',
                'verbose_name_plural': 'Schedule Days',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='SummitSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('session_type', models.CharField(choices=[('keynote', 'Keynote'), ('networking', 'Networking'), ('panel', 'Panel Discussion'), ('break', 'Break'), ('workshop', 'Workshop'), ('hackathon', 'Hackathon'), ('exhibition', 'Exhibition'), ('closing', 'Closing'), ('other', 'Other')], default='other', max_length=50)),
                ('title', models.CharField(help_text="e.g. 'Software Ecosystem Landscape'", max_length=200)),
                ('description', models.TextField(blank=True, null=True)),
                ('venue', models.CharField(blank=True, max_length=100, null=True)),
                ('is_break', models.BooleanField(default=False)),
                ('order', models.PositiveIntegerField(default=0, help_text='Order of appearance in the slot')),
            ],
            options={
                'verbose_name': 'Session',
                'verbose_name_plural': 'Sessions',
                'ordering': ['timeslot__start_time', 'order'],
            },
        ),
        migrations.CreateModel(
            name='SummitSpeaker',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('full_name', models.CharField(max_length=150)),
                ('position', models.CharField(max_length=150)),
                ('organization', models.CharField(max_length=250)),
                ('track', models.CharField(blank=True, help_text='E.g., Keynote Speaker, Panelist, Moderator', max_length=100)),
                ('topic', models.CharField(max_length=255)),
                ('summary', models.TextField(blank=True)),
                ('bio', models.TextField(blank=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='uploads/speakers/')),
                ('linkedin_url', models.URLField(blank=True, null=True)),
                ('twitter_url', models.URLField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['full_name'],
            },
        ),
        migrations.CreateModel(
            name='Booth',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booth_number', models.CharField(max_length=20, unique=True)),
                ('booth_type', models.CharField(choices=[('standard', 'Standard Booth'), ('premium', 'Premium Booth'), ('custom', 'Custom Booth')], default='standard', max_length=20)),
                ('size', models.CharField(help_text='e.g., 3m x 3m', max_length=50)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('is_booked', models.BooleanField(default=False)),
                ('section', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booths', to='summitPage.exhibitionsection')),
            ],
        ),
        migrations.CreateModel(
            name='Exhibitor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('title', models.CharField(choices=[('', 'Select Title'), ('Prof', 'Prof.'), ('Dr', 'Dr.'), ('Mr', 'Mr.'), ('Mrs', 'Mrs.'), ('Ms', 'Ms.')], max_length=10)),
                ('first_name', models.CharField(max_length=100)),
                ('second_name', models.CharField(blank=True, max_length=100, null=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('phone', models.CharField(max_length=20)),
                ('organization_type', models.CharField(max_length=200)),
                ('job_title', models.CharField(max_length=200)),
                ('category', models.CharField(choices=[('', 'Select Category'), ('startup', 'Startup'), ('corporate', 'Corporate'), ('government', 'Government Agency'), ('academic', 'Academic Institution'), ('ngo', 'NGO'), ('other', 'Other')], max_length=50)),
                ('product_description', models.TextField(blank=True, null=True)),
                ('national_id_number', models.CharField(max_length=50)),
                ('national_id_scan', models.FileField(upload_to='uploads/exhibitors/id_scans/')),
                ('passport_photo', models.ImageField(upload_to='uploads/exhibitors/photos/')),
                ('business_type', models.CharField(choices=[('local', 'Local (Kenyan)'), ('international', 'International')], default='local', help_text='Select whether this is a local or international business', max_length=20)),
                ('kra_pin', models.CharField(blank=True, max_length=20, null=True)),
                ('business_registration_doc', models.FileField(blank=True, null=True, upload_to='uploads/exhibitors/business_docs/')),
                ('international_business_doc', models.FileField(blank=True, null=True, upload_to='uploads/exhibitors/international_docs/')),
                ('country_of_registration', django_countries.fields.CountryField(blank=True, max_length=2, null=True)),
                ('beneficial_owner_details', models.TextField(blank=True, null=True)),
                ('beneficial_owner_doc', models.FileField(blank=True, null=True, upload_to='uploads/exhibitors/owners_docs/')),
                ('privacy_agreed', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booth', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='summitPage.booth')),
                ('section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='summitPage.exhibitionsection')),
            ],
        ),
        migrations.CreateModel(
            name='EmailLogs',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField()),
                ('attempts', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('exhibitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emaillog', to='summitPage.exhibitor')),
            ],
        ),
        migrations.CreateModel(
            name='BoothBooking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booked_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('approved', models.BooleanField(default=False)),
                ('booth', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='booking', to='summitPage.booth')),
                ('exhibitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to='summitPage.exhibitor')),
            ],
        ),
        migrations.CreateModel(
            name='BeneficialOwner',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=255)),
                ('nationality', models.CharField(max_length=500)),
                ('identification_type', models.CharField(choices=[('national_id', 'National ID'), ('passport', 'Passport')], max_length=20)),
                ('id_number', models.CharField(max_length=50)),
                ('ownership_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('supporting_document', models.FileField(blank=True, null=True, upload_to='uploads/exhibitors/ownership_docs/')),
                ('exhibitor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owners', to='summitPage.exhibitor')),
            ],
        ),
        migrations.CreateModel(
            name='EmailLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient', models.EmailField(max_length=254)),
                ('subject', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField()),
                ('attempts', models.IntegerField(default=0)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('registrant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emaillog', to='summitPage.registrant')),
            ],
        ),
        migrations.CreateModel(
            name='SummitPanelist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(help_text="e.g. 'Keynote Address', 'Presentation', 'Moderator'", max_length=150)),
                ('name', models.CharField(blank=True, help_text="e.g. 'Dr. Jane Doe'", max_length=200, null=True)),
                ('organization', models.CharField(blank=True, max_length=200, null=True)),
                ('order', models.PositiveIntegerField(default=0)),
                ('session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='panelists', to='summitPage.summitsession')),
            ],
            options={
                'verbose_name': 'Panelist',
                'verbose_name_plural': 'Panelists',
                'ordering': ['order'],
            },
        ),
        migrations.CreateModel(
            name='SummitTimeSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField(blank=True, null=True)),
                ('label', models.CharField(blank=True, help_text="Optional label like 'All Day' or 'Morning'", max_length=100)),
                ('duration', models.CharField(blank=True, help_text='e.g. 1 hr 30 min', max_length=50, null=True)),
                ('day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeslots', to='summitPage.summitscheduleday')),
            ],
            options={
                'verbose_name': 'Time Slot',
                'verbose_name_plural': 'Time Slots',
                'ordering': ['start_time'],
            },
        ),
        migrations.AddField(
            model_name='summitsession',
            name='timeslot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sessions', to='summitPage.summittimeslot'),
        ),
    ]
